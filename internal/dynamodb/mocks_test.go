// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package dynamodb

import (
	"context"
	ddb "github.com/aws/aws-sdk-go-v2/service/dynamodb"
	"sync"
)

// Ensure, that ddbClientMock does implement ddbClient.
// If this is not the case, regenerate this file with moq.
var _ ddbClient = &ddbClientMock{}

// ddbClientMock is a mock implementation of ddbClient.
//
//	func TestSomethingThatUsesddbClient(t *testing.T) {
//
//		// make and configure a mocked ddbClient
//		mockedddbClient := &ddbClientMock{
//			BatchWriteItemFunc: func(ctx context.Context, params *ddb.BatchWriteItemInput, optFns ...func(*ddb.Options)) (*ddb.BatchWriteItemOutput, error) {
//				panic("mock out the BatchWriteItem method")
//			},
//			PutItemFunc: func(ctx context.Context, params *ddb.PutItemInput, optFns ...func(*ddb.Options)) (*ddb.PutItemOutput, error) {
//				panic("mock out the PutItem method")
//			},
//			ScanFunc: func(ctx context.Context, params *ddb.ScanInput, optFns ...func(*ddb.Options)) (*ddb.ScanOutput, error) {
//				panic("mock out the Scan method")
//			},
//		}
//
//		// use mockedddbClient in code that requires ddbClient
//		// and then make assertions.
//
//	}
type ddbClientMock struct {
	// BatchWriteItemFunc mocks the BatchWriteItem method.
	BatchWriteItemFunc func(ctx context.Context, params *ddb.BatchWriteItemInput, optFns ...func(*ddb.Options)) (*ddb.BatchWriteItemOutput, error)

	// PutItemFunc mocks the PutItem method.
	PutItemFunc func(ctx context.Context, params *ddb.PutItemInput, optFns ...func(*ddb.Options)) (*ddb.PutItemOutput, error)

	// ScanFunc mocks the Scan method.
	ScanFunc func(ctx context.Context, params *ddb.ScanInput, optFns ...func(*ddb.Options)) (*ddb.ScanOutput, error)

	// calls tracks calls to the methods.
	calls struct {
		// BatchWriteItem holds details about calls to the BatchWriteItem method.
		BatchWriteItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ddb.BatchWriteItemInput
			// OptFns is the optFns argument value.
			OptFns []func(*ddb.Options)
		}
		// PutItem holds details about calls to the PutItem method.
		PutItem []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ddb.PutItemInput
			// OptFns is the optFns argument value.
			OptFns []func(*ddb.Options)
		}
		// Scan holds details about calls to the Scan method.
		Scan []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Params is the params argument value.
			Params *ddb.ScanInput
			// OptFns is the optFns argument value.
			OptFns []func(*ddb.Options)
		}
	}
	lockBatchWriteItem sync.RWMutex
	lockPutItem        sync.RWMutex
	lockScan           sync.RWMutex
}

// BatchWriteItem calls BatchWriteItemFunc.
func (mock *ddbClientMock) BatchWriteItem(ctx context.Context, params *ddb.BatchWriteItemInput, optFns ...func(*ddb.Options)) (*ddb.BatchWriteItemOutput, error) {
	callInfo := struct {
		Ctx    context.Context
		Params *ddb.BatchWriteItemInput
		OptFns []func(*ddb.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockBatchWriteItem.Lock()
	mock.calls.BatchWriteItem = append(mock.calls.BatchWriteItem, callInfo)
	mock.lockBatchWriteItem.Unlock()
	if mock.BatchWriteItemFunc == nil {
		var (
			batchWriteItemOutputOut *ddb.BatchWriteItemOutput
			errOut                  error
		)
		return batchWriteItemOutputOut, errOut
	}
	return mock.BatchWriteItemFunc(ctx, params, optFns...)
}

// BatchWriteItemCalls gets all the calls that were made to BatchWriteItem.
// Check the length with:
//
//	len(mockedddbClient.BatchWriteItemCalls())
func (mock *ddbClientMock) BatchWriteItemCalls() []struct {
	Ctx    context.Context
	Params *ddb.BatchWriteItemInput
	OptFns []func(*ddb.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ddb.BatchWriteItemInput
		OptFns []func(*ddb.Options)
	}
	mock.lockBatchWriteItem.RLock()
	calls = mock.calls.BatchWriteItem
	mock.lockBatchWriteItem.RUnlock()
	return calls
}

// PutItem calls PutItemFunc.
func (mock *ddbClientMock) PutItem(ctx context.Context, params *ddb.PutItemInput, optFns ...func(*ddb.Options)) (*ddb.PutItemOutput, error) {
	callInfo := struct {
		Ctx    context.Context
		Params *ddb.PutItemInput
		OptFns []func(*ddb.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockPutItem.Lock()
	mock.calls.PutItem = append(mock.calls.PutItem, callInfo)
	mock.lockPutItem.Unlock()
	if mock.PutItemFunc == nil {
		var (
			putItemOutputOut *ddb.PutItemOutput
			errOut           error
		)
		return putItemOutputOut, errOut
	}
	return mock.PutItemFunc(ctx, params, optFns...)
}

// PutItemCalls gets all the calls that were made to PutItem.
// Check the length with:
//
//	len(mockedddbClient.PutItemCalls())
func (mock *ddbClientMock) PutItemCalls() []struct {
	Ctx    context.Context
	Params *ddb.PutItemInput
	OptFns []func(*ddb.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ddb.PutItemInput
		OptFns []func(*ddb.Options)
	}
	mock.lockPutItem.RLock()
	calls = mock.calls.PutItem
	mock.lockPutItem.RUnlock()
	return calls
}

// Scan calls ScanFunc.
func (mock *ddbClientMock) Scan(ctx context.Context, params *ddb.ScanInput, optFns ...func(*ddb.Options)) (*ddb.ScanOutput, error) {
	callInfo := struct {
		Ctx    context.Context
		Params *ddb.ScanInput
		OptFns []func(*ddb.Options)
	}{
		Ctx:    ctx,
		Params: params,
		OptFns: optFns,
	}
	mock.lockScan.Lock()
	mock.calls.Scan = append(mock.calls.Scan, callInfo)
	mock.lockScan.Unlock()
	if mock.ScanFunc == nil {
		var (
			scanOutputOut *ddb.ScanOutput
			errOut        error
		)
		return scanOutputOut, errOut
	}
	return mock.ScanFunc(ctx, params, optFns...)
}

// ScanCalls gets all the calls that were made to Scan.
// Check the length with:
//
//	len(mockedddbClient.ScanCalls())
func (mock *ddbClientMock) ScanCalls() []struct {
	Ctx    context.Context
	Params *ddb.ScanInput
	OptFns []func(*ddb.Options)
} {
	var calls []struct {
		Ctx    context.Context
		Params *ddb.ScanInput
		OptFns []func(*ddb.Options)
	}
	mock.lockScan.RLock()
	calls = mock.calls.Scan
	mock.lockScan.RUnlock()
	return calls
}
